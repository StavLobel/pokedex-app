name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing Job
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: pokemon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev

    - name: Install Python dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create test environment file
      working-directory: ./backend
      run: |
        cat > .env.test << EOF
        ENVIRONMENT=test
        DEBUG=false
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pokemon_test
        REDIS_URL=redis://localhost:6379
        POKEAPI_BASE_URL=https://pokeapi.co/api/v2
        MODEL_TYPE=mock
        LOG_LEVEL=WARNING
        EOF

    - name: Run backend linting
      working-directory: ./backend
      run: |
        # Check code formatting with Black
        black --check --diff .
        
        # Run Flake8 for style and error checking
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
        # Run import sorting check
        isort --check-only --diff .
        
        # Run type checking with mypy
        mypy app/ --ignore-missing-imports

    - name: Run backend unit tests
      working-directory: ./backend
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pokemon_test
        REDIS_URL: redis://localhost:6379
      run: |
        # Run tests with coverage
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing
        
        # Check coverage threshold (80% minimum)
        coverage report --fail-under=80

    - name: Run backend integration tests
      working-directory: ./backend
      env:
        ENVIRONMENT: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/pokemon_test
        REDIS_URL: redis://localhost:6379
      run: |
        pytest tests/integration/ -v --maxfail=5

    - name: Upload backend coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Upload backend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/coverage.xml
          backend/htmlcov/
          backend/pytest-report.xml

  # Frontend Testing Job (placeholder for when frontend is added)
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if frontend exists
      id: check-frontend
      run: |
        if [ -d "frontend" ] && [ -f "frontend/package.json" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Node.js ${{ env.NODE_VERSION }}
      if: steps.check-frontend.outputs.exists == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: |
        # ESLint for JavaScript/TypeScript
        npm run lint
        
        # Prettier for code formatting
        npm run format:check
        
        # TypeScript type checking
        npm run type-check

    - name: Run frontend unit tests
      if: steps.check-frontend.outputs.exists == 'true'
      working-directory: ./frontend
      run: |
        npm run test:coverage

    - name: Upload frontend coverage reports
      if: steps.check-frontend.outputs.exists == 'true'
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

    - name: Skip frontend tests (no frontend found)
      if: steps.check-frontend.outputs.exists == 'false'
      run: |
        echo "‚ö†Ô∏è No frontend directory found. Skipping frontend tests."
        echo "Frontend tests will run automatically when frontend code is added."

  # Security and Quality Checks
  security-checks:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep

    - name: Run Python security checks
      working-directory: ./backend
      run: |
        # Check for known security vulnerabilities in dependencies
        safety check --json || true
        
        # Run Bandit for security issues in code
        bandit -r app/ -f json -o bandit-report.json || true
        
        # Display results
        echo "=== Safety Check Results ==="
        safety check || true
        echo "=== Bandit Security Check Results ==="
        bandit -r app/ || true

    - name: Run Semgrep security analysis
      run: |
        # Run Semgrep with Python security rules
        semgrep --config=auto backend/ --json --output=semgrep-report.json || true
        echo "=== Semgrep Security Analysis ==="
        semgrep --config=auto backend/ || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          backend/bandit-report.json
          semgrep-report.json

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend Docker image
      run: |
        docker build -t pokemon-backend:test ./backend

    - name: Test Docker image
      run: |
        # Run container and test health endpoint
        docker run -d --name test-backend -p 8000:8000 pokemon-backend:test
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/api/v1/health || exit 1
        
        # Cleanup
        docker stop test-backend
        docker rm test-backend

  # Performance and Load Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install performance testing tools
      run: |
        pip install locust httpx

    - name: Start backend service
      working-directory: ./backend
      run: |
        pip install -r requirements.txt
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Run basic performance tests
      run: |
        # Simple load test with curl
        echo "Testing health endpoint performance..."
        for i in {1..10}; do
          curl -w "@-" -o /dev/null -s "http://localhost:8000/api/v1/health" << 'EOF'
        time_total: %{time_total}s
        EOF
        done

    - name: Performance test results
      run: |
        echo "‚úÖ Basic performance tests completed"
        echo "More comprehensive load testing will be added in future iterations"

  # Deployment Readiness Check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [backend-tests, security-checks, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment requirements
      run: |
        echo "üîç Checking deployment readiness..."
        
        # Check if required files exist
        required_files=(
          "docker-compose.yml"
          "backend/Dockerfile"
          "backend/requirements.txt"
          ".github/workflows/ci.yml"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done
        
        echo "‚úÖ All deployment requirements satisfied"

    - name: Validate Docker Compose
      run: |
        docker-compose config

  # Notification Job
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-checks, docker-build]
    if: always()
    
    steps:
    - name: Determine overall status
      id: status
      run: |
        if [[ "${{ needs.backend-tests.result }}" == "success" && 
              "${{ needs.security-checks.result }}" == "success" && 
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=‚úÖ All CI checks passed!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=‚ùå Some CI checks failed. Please review the logs." >> $GITHUB_OUTPUT
        fi

    - name: Create job summary
      run: |
        echo "## üöÄ CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '‚úÖ Passed' || needs.frontend-tests.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Checks | ${{ needs.security-checks.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Status:** ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìã PR Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Backend tests passing" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Security checks completed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Docker build successful" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Code review completed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Documentation updated (if needed)" >> $GITHUB_STEP_SUMMARY
        fi